{"version":3,"file":"editor-to-word.cjs.production.min.js","sources":["../src/default.ts","../src/utils.ts","../src/token/index.ts","../src/judge.ts","../src/token/styleMap.ts","../src/token/color.ts","../src/token/backgroundColor.ts","../src/token/bold.ts","../src/token/textAlign.ts","../src/token/borderColor.ts","../src/token/fontFamily.ts","../src/token/fontStyle.ts","../src/token/height.ts","../src/token/lineHeight.ts","../src/token/padding.ts","../src/token/textDecoration.ts","../src/token/textIndent.ts","../src/token/verticalAlign.ts","../src/token/width.ts","../src/token/subScript.ts","../src/token/superScript.ts","../src/isNodeType.ts","../src/builder/text.ts","../src/builder/table.ts","../src/builder/index.ts","../src/index.ts"],"sourcesContent":["import {\r\n  AlignmentType,\r\n  BorderStyle,\r\n  PageOrientation,\r\n  VerticalAlign,\r\n} from 'docx';\r\n\r\nimport { IPageLayout } from './types';\r\n\r\nexport const Splitter_Colon = ':';\r\n\r\nexport const Splitter_Semicolon = ';';\r\n\r\n// px by twips\r\nexport const PXbyTWIPS = 16;\r\n\r\n// px by pt\r\nexport const PXbyPT = 3 / 4;\r\n\r\n// default font size in px\r\nexport const D_FontSizePX = 16.3;\r\n\r\n// default font size in pt\r\nexport const D_FontSizePT = D_FontSizePX * PXbyPT;\r\n\r\n// default line height\r\nexport const D_LineHeight = 1.5;\r\n\r\n// default page width in px\r\nexport const D_PageWidthPX = 794;\r\n\r\n// default page height in px\r\nexport const D_PageHeightPX = 1123;\r\n\r\n// default page padding width in px\r\nexport const D_PagePaddingPX = 71;\r\n\r\n// default page table full width in px\r\nexport const D_PageTableFullWidth = 642;\r\n\r\n// default table full width in DXA\r\nexport const D_TableFullWidth = 9035;\r\n\r\nexport const D_TableBorderColor = '444444';\r\n\r\n// a4 paper size\r\nexport const A4MillimetersWidth = 145.4;\r\n\r\n// table cell margin in twips\r\nexport const D_CELL_MARGIN = 1 * PXbyTWIPS;\r\n\r\n// table border width in px\r\nexport const D_TableBorderSize = 2;\r\n\r\n// table cell height in px\r\nexport const D_TableCellHeightPx = 18;\r\n\r\n// font family SimSun\r\nexport const FontSongTi = ['SimSun', '宋体', 'Songti SC', 'NSimSun', 'STSong'];\r\n\r\n// text-align\r\nexport const AlignMap = {\r\n  left: AlignmentType.LEFT,\r\n  center: AlignmentType.CENTER,\r\n  right: AlignmentType.RIGHT,\r\n};\r\n\r\nexport const hyperlinkColor = '#007AFF';\r\n\r\n// style with tag\r\nexport const D_TagStyleMap = {\r\n  p: `line-height: ${D_LineHeight};`,\r\n  strong: 'font-weight: bold;',\r\n  em: 'font-style: italic;',\r\n  u: 'text-decoration: underline;',\r\n  del: 'text-decoration: line-through;',\r\n  h1: `font-weight: bold; font-size: 40px; line-height: ${D_LineHeight};`,\r\n  h2: `font-weight: bold; font-size: 36px; line-height: ${D_LineHeight};`,\r\n  h3: `font-weight: bold; font-size: 24px; line-height: ${D_LineHeight};`,\r\n  h4: `font-weight: bold; font-size: 18px; line-height: ${D_LineHeight};`,\r\n  h5: `font-weight: bold; font-size: 15px; line-height: ${D_LineHeight};`,\r\n  h6: `font-weight: bold; font-size: 13px; line-height: ${D_LineHeight};`,\r\n  sub: 'subscript: true;',\r\n  sup: 'superscript: true;',\r\n  a: `text-decoration: underline; color: ${hyperlinkColor};`,\r\n};\r\n\r\n// default paper layout\r\nexport const D_Layout: IPageLayout = {\r\n  bottomMargin: '2.54cm',\r\n  leftMargin: '3.18cm',\r\n  rightMargin: '3.18cm',\r\n  topMargin: '2.54cm',\r\n  orientation: PageOrientation.PORTRAIT,\r\n};\r\n\r\n// Direction\r\nexport const Direction = {\r\n  left: 'left',\r\n  right: 'right',\r\n  firstLine: 'firstLine',\r\n  start: 'start',\r\n  end: 'end',\r\n  hanging: 'hanging',\r\n};\r\n\r\nexport const PaddingDirection = {\r\n  'padding-left': Direction.left,\r\n  'padding-right': Direction.right,\r\n  'padding-top': Direction.start,\r\n  'padding-bottom': Direction.end,\r\n};\r\n\r\n// Size\r\nexport const Size = {\r\n  em: 'em',\r\n  px: 'px',\r\n  pt: 'pt',\r\n};\r\n\r\n// single line\r\nexport const SingleLine = { type: 'single', color: '3d4757' };\r\n\r\nexport const TagType = {\r\n  table: 'table',\r\n  link: 'a',\r\n  text: 'text',\r\n  img: 'img',\r\n  ordered_list: 'ol',\r\n  unordered_list: 'ul',\r\n};\r\n\r\n// default border style\r\nexport const DefaultBorder = {\r\n  style: BorderStyle.SINGLE,\r\n  size: 0,\r\n  color: '#fff',\r\n};\r\n\r\n// table cell vertical align map\r\nexport const verticalAlignMap = {\r\n  top: VerticalAlign.TOP,\r\n  middle: VerticalAlign.CENTER,\r\n  bottom: VerticalAlign.BOTTOM,\r\n};\r\n","import { convertMillimetersToTwip } from 'docx';\r\nimport tinycolor from 'tinycolor2';\r\n\r\nfunction typeOf(obj: unknown) {\r\n  const toString = Object.prototype.toString;\r\n  const map = {\r\n    '[object Boolean]': 'boolean',\r\n    '[object Number]': 'number',\r\n    '[object String]': 'string',\r\n    '[object Function]': 'function',\r\n    '[object Array]': 'array',\r\n    '[object Date]': 'date',\r\n    '[object RegExp]': 'regExp',\r\n    '[object Undefined]': 'undefined',\r\n    '[object Null]': 'null',\r\n    '[object Object]': 'object',\r\n  };\r\n  // @ts-ignore\r\n  return map[toString.call(obj)];\r\n}\r\n\r\nexport { typeOf };\r\n\r\nexport const isFilledArray = (arr: unknown) => {\r\n  return Array.isArray(arr) && arr.length > 0;\r\n};\r\n\r\n// unique array by given key\r\nexport const getUniqueArrayByKey = <T>(arr: T[], uniqueKey = 'id'): T[] => {\r\n  const isEveryObject = arr.every((item) => typeOf(item) === 'object');\r\n  if (!isFilledArray(arr) || arr.length === 1 || !isEveryObject) return arr;\r\n  const hash: T[keyof T][] = [];\r\n  return arr.reduce((item, next) => {\r\n    const k = next[uniqueKey as keyof typeof next];\r\n    if (k && !hash.includes(k)) {\r\n      hash.push(k);\r\n      item.push(next);\r\n    }\r\n    return item;\r\n  }, [] as T[]);\r\n};\r\n\r\nexport const removeTagDIV = (str: string) => {\r\n  const reg = /<div[^>]*?>|<\\/div>/gi;\r\n  return str.replace(reg, '');\r\n};\r\n\r\nexport const escape2Html = (str: string) => {\r\n  const arrEntities = { lt: '<', gt: '>', nbsp: ' ', amp: '&', quot: '\"' };\r\n  return str.replace(/&(lt|gt|nbsp|amp|quot);/gi, function (_, t) {\r\n    // @ts-ignore\r\n    return arrEntities[t];\r\n  });\r\n};\r\n\r\nexport const trimHtml = (str: string) => {\r\n  return removeTagDIV(escape2Html(str));\r\n};\r\n\r\nexport const deepCopyByJSON = <T>(obj: T) =>\r\n  JSON.parse(JSON.stringify(obj)) as T;\r\n\r\nexport const isValidColor = (color: string) => tinycolor(color).isValid();\r\n\r\nexport const toHex = (color: string) => tinycolor(color).toHexString();\r\n\r\nimport { SizeNumber } from './types';\r\n\r\n/**\r\n * parse size\r\n */\r\nexport const handleSizeNumber = (val: string): SizeNumber => {\r\n  const m = val.match(/\\d+(.\\d+)?/g);\r\n  if (val.match(/\\d+(.\\d+)?/g) && m && Array.isArray(m) && m[0]) {\r\n    const target = m[0];\r\n    const type = target ? val.replace(new RegExp(target, 'g'), '') : '';\r\n    return { value: parseFloat(target), type };\r\n  }\r\n  return { type: 'UNKNOWN', value: 0 };\r\n};\r\n\r\n// parse '2.54cm' to 2.54\r\nexport const numberCM = (size: string) =>\r\n  parseFloat(size?.toUpperCase().replace(/CM/i, ''));\r\n\r\n// calc margin in twip\r\nexport const calcMargin = (margin: string) =>\r\n  convertMillimetersToTwip(10 * numberCM(margin));\r\n\r\nexport const optimizeBlankSpace = (content: string, ratio = 1) => {\r\n  const textWithoutBlank = content.trimEnd();\r\n  const blank = content.slice(textWithoutBlank.length);\r\n  const optimizedBlank =\r\n    ratio === 1 ? blank : new Array(blank.length * ratio).fill(' ').join('');\r\n  const text =\r\n    blank.length > 1 ? `${textWithoutBlank}${optimizedBlank}` + '\\t' : content;\r\n  return text;\r\n};\r\n\r\nexport const getImageBlob = async (src: string) => {\r\n  const blob = await fetch(src).then((res) => res.blob());\r\n  return blob;\r\n};\r\n","import { backgroundHandler } from './backgroundColor';\r\nimport { superScriptHandler } from './superScript';\r\nimport { subScriptHandler } from './subScript';\r\nimport { colorHandler } from './color';\r\nimport { StyleInterface, StyleOption } from './../types';\r\nimport { widthHandler } from './width';\r\nimport { verticalAlignHandler } from './verticalAlign';\r\nimport { textDecorationHandler } from './textDecoration';\r\nimport { paddingHandler } from './padding';\r\nimport { lineHeightHandler } from './lineHeight';\r\nimport { heightHandler } from './height';\r\nimport { alignHandler } from './textAlign';\r\nimport { boldHandler } from './bold';\r\nimport { borderColorHandler } from './borderColor';\r\nimport { fontFamilyHandler } from './fontFamily';\r\nimport { fontStyleHandler } from './fontStyle';\r\nimport { textIndentHandler } from './textIndent';\r\n\r\nimport {\r\n  isTextAlign,\r\n  isBold,\r\n  isColor,\r\n  isBorderColor,\r\n  isFontFamily,\r\n  isFontStyle,\r\n  isHeight,\r\n  isLineHeight,\r\n  isPadding,\r\n  isTextDecoration,\r\n  isTextIndent,\r\n  isVerticalAlign,\r\n  isWidth,\r\n  isBackgroundColor,\r\n  isSubScript,\r\n  isSuperScript,\r\n} from '../judge';\r\n\r\nexport const tokens = [\r\n  {\r\n    name: 'color',\r\n    judge: isColor,\r\n    handler: colorHandler,\r\n  },\r\n  {\r\n    name: 'backgroundColor',\r\n    judge: isBackgroundColor,\r\n    handler: backgroundHandler,\r\n  },\r\n  {\r\n    name: 'bold',\r\n    judge: isBold,\r\n    handler: boldHandler,\r\n  },\r\n  {\r\n    name: 'align',\r\n    judge: isTextAlign,\r\n    handler: alignHandler,\r\n  },\r\n  {\r\n    name: 'borderColor',\r\n    judge: isBorderColor,\r\n    handler: borderColorHandler,\r\n  },\r\n  {\r\n    name: 'fontFamily',\r\n    judge: isFontFamily,\r\n    handler: fontFamilyHandler,\r\n  },\r\n  {\r\n    name: 'fontStyle',\r\n    judge: isFontStyle,\r\n    handler: fontStyleHandler,\r\n  },\r\n  {\r\n    name: 'height',\r\n    judge: isHeight,\r\n    handler: heightHandler,\r\n  },\r\n  {\r\n    name: 'lineHeight',\r\n    judge: isLineHeight,\r\n    handler: lineHeightHandler,\r\n  },\r\n  {\r\n    name: 'padding',\r\n    judge: isPadding,\r\n    handler: paddingHandler,\r\n  },\r\n  {\r\n    name: 'textDecoration',\r\n    judge: isTextDecoration,\r\n    handler: textDecorationHandler,\r\n  },\r\n  {\r\n    name: 'textIndent',\r\n    judge: isTextIndent,\r\n    handler: textIndentHandler,\r\n  },\r\n  {\r\n    name: 'verticalAlign',\r\n    judge: isVerticalAlign,\r\n    handler: verticalAlignHandler,\r\n  },\r\n  {\r\n    name: 'width',\r\n    judge: isWidth,\r\n    handler: widthHandler,\r\n  },\r\n  {\r\n    name: 'subScript',\r\n    judge: isSubScript,\r\n    handler: subScriptHandler,\r\n  },\r\n  {\r\n    name: 'superScript',\r\n    judge: isSuperScript,\r\n    handler: superScriptHandler,\r\n  },\r\n];\r\n\r\nexport const provideStyle = (styles: StyleInterface[]) => {\r\n  let styleOption: StyleOption = {};\r\n\r\n  styles.forEach((style) => {\r\n    const token = tokens.find((token) => token.judge(style));\r\n    if (token) {\r\n      styleOption = token.handler(style, styleOption);\r\n    }\r\n  });\r\n\r\n  return styleOption;\r\n};\r\n","import { StyleMap } from './token/styleMap';\r\n\r\nimport { StyleInterface } from './types';\r\n\r\nexport const isColor = ({ key }: StyleInterface) => key === StyleMap.color;\r\n\r\nexport const isBackgroundColor = ({ key }: StyleInterface) =>\r\n  key === StyleMap.backgroundColor;\r\n\r\nexport const isTextDecoration = ({ key }: StyleInterface) =>\r\n  key === StyleMap.textDecoration;\r\n\r\nexport const isPadding = ({ key }: StyleInterface) =>\r\n  key.indexOf('padding-') > -1;\r\n\r\nexport const isTextAlign = ({ key }: StyleInterface) =>\r\n  key.indexOf(StyleMap.textAlign) > -1;\r\n\r\nexport const isLineHeight = ({ key }: StyleInterface) =>\r\n  key === StyleMap.lineHeight;\r\n\r\nexport const isFontFamily = ({ key }: StyleInterface) =>\r\n  key === StyleMap.fontFamily;\r\n\r\nexport const isVerticalAlign = ({ key }: StyleInterface) =>\r\n  key === StyleMap.verticalAlign;\r\n\r\nexport const isBorderColor = ({ key }: StyleInterface) =>\r\n  key === StyleMap.borderColor;\r\n\r\nexport const isWidth = ({ key }: StyleInterface) => key === StyleMap.width;\r\n\r\nexport const isHeight = ({ key }: StyleInterface) => key === StyleMap.height;\r\n\r\nexport const isTextIndent = ({ key }: StyleInterface) =>\r\n  key === StyleMap.textIndent;\r\n\r\nexport const isFontWeight = ({ key }: StyleInterface) =>\r\n  key === StyleMap.fontWeight;\r\n\r\nexport const isBold = ({ key, val }: StyleInterface) =>\r\n  key === StyleMap.fontWeight && val.toLowerCase() === 'bold';\r\n\r\nexport const isFontStyle = ({ key }: StyleInterface) =>\r\n  key === StyleMap.fontStyle;\r\n\r\nexport const isFontStyleItalic = ({ key, val }: StyleInterface) =>\r\n  key === StyleMap.fontStyle && val.toLowerCase() === 'italic';\r\n\r\nexport const isSubScript = ({ key, val }: StyleInterface) =>\r\n  key === StyleMap.subScript && val.toLowerCase() === 'true';\r\n\r\nexport const isSuperScript = ({ key, val }: StyleInterface) =>\r\n  key === StyleMap.superScript && val.toLowerCase() === 'true';\r\n","// style map\r\nexport const StyleMap = {\r\n  fontFamily: 'font-family',\r\n  textAlign: 'text-align',\r\n  paddingRight: 'padding-right',\r\n  paddingLeft: 'padding-left',\r\n  lineHeight: 'line-height',\r\n  fontSize: 'font-size',\r\n  color: 'color',\r\n  backgroundColor: 'background-color',\r\n  textDecoration: 'text-decoration',\r\n  textIndent: 'text-indent',\r\n  borderColor: 'border-color',\r\n  height: 'height',\r\n  width: 'width',\r\n  fontWeight: 'font-weight',\r\n  verticalAlign: 'vertical-align',\r\n  lineThrough: 'line-through',\r\n  underline: 'underline',\r\n  fontStyle: 'font-style',\r\n  subScript: 'subscript',\r\n  superScript: 'superscript',\r\n};\r\n","import { deepCopyByJSON } from './../utils';\r\nimport { TokenHandler } from './types';\r\n\r\nexport const colorHandler: TokenHandler = ({ val }, styleOp) => {\r\n  const styleOption = deepCopyByJSON(styleOp);\r\n\r\n  styleOption.color = val.replace(/#/g, '');\r\n\r\n  return styleOption;\r\n};\r\n","import { ShadingType } from 'docx';\r\nimport { deepCopyByJSON } from './../utils';\r\nimport { TokenHandler } from './types';\r\n\r\nexport const backgroundHandler: TokenHandler = ({ val }, styleOp) => {\r\n  const styleOption = deepCopyByJSON(styleOp);\r\n\r\n  styleOption.shading = {\r\n    type: ShadingType.CLEAR,\r\n    fill: val.replace(/#/g, ''),\r\n  };\r\n\r\n  return styleOption;\r\n};\r\n","import { deepCopyByJSON } from './../utils';\r\nimport { TokenHandler } from './types';\r\n\r\nexport const boldHandler: TokenHandler = (_, styleOp) => {\r\n  const styleOption = deepCopyByJSON(styleOp);\r\n\r\n  styleOption.bold = true;\r\n\r\n  return styleOption;\r\n};\r\n","import { AlignmentType } from 'docx';\r\nimport { deepCopyByJSON } from '../utils';\r\nimport { TokenHandler } from './types';\r\nimport { AlignMap } from '../default';\r\n\r\nexport const alignHandler: TokenHandler = ({ val }, styleOp) => {\r\n  const styleOption = deepCopyByJSON(styleOp);\r\n\r\n  styleOption.alignment =\r\n    AlignMap[val as keyof typeof AlignMap] || AlignmentType.LEFT;\r\n\r\n  return styleOption;\r\n};\r\n","import { deepCopyByJSON } from './../utils';\r\nimport { TokenHandler } from './types';\r\n\r\nexport const borderColorHandler: TokenHandler = ({ val }, styleOp) => {\r\n  const styleOption = deepCopyByJSON(styleOp);\r\n\r\n  styleOption.borderColor = val.replace(/#/i, '');\r\n\r\n  return styleOption;\r\n};\r\n","import { deepCopyByJSON } from './../utils';\r\nimport { TokenHandler } from './types';\r\n\r\nexport const fontFamilyHandler: TokenHandler = ({ val }, styleOp) => {\r\n  const styleOption = deepCopyByJSON(styleOp);\r\n\r\n  if (val.indexOf(',') === -1 && val.indexOf(' ') === -1) {\r\n    styleOption.font = val;\r\n  }\r\n\r\n  return styleOption;\r\n};\r\n","import { deepCopyByJSON } from './../utils';\r\nimport { TokenHandler } from './types';\r\n\r\nexport const fontStyleHandler: TokenHandler = (_, styleOp) => {\r\n  const styleOption = deepCopyByJSON(styleOp);\r\n\r\n  styleOption.italics = true;\r\n\r\n  return styleOption;\r\n};\r\n","import { deepCopyByJSON } from './../utils';\r\nimport { TokenHandler } from './types';\r\n\r\nexport const heightHandler: TokenHandler = ({ val }, styleOp) => {\r\n  const styleOption = deepCopyByJSON(styleOp);\r\n\r\n  const h = parseFloat(val.replace(/px/i, ''));\r\n  styleOption.tHeight = h;\r\n\r\n  return styleOption;\r\n};\r\n","import { LineRuleType } from 'docx';\r\nimport { deepCopyByJSON } from './../utils';\r\nimport { TokenHandler } from './types';\r\nimport { handleSizeNumber } from '../utils';\r\nimport { SpacingType } from '../types';\r\n\r\nexport const lineHeightHandler: TokenHandler = ({ val }, styleOp) => {\r\n  const styleOption = deepCopyByJSON(styleOp);\r\n\r\n  const spacing: SpacingType = {};\r\n  const { value, type } = handleSizeNumber(val);\r\n\r\n  const lineHeightToSpace = 240;\r\n\r\n  const isPx = type.toLowerCase() === 'px';\r\n  const isPr = type.toLowerCase() == '%';\r\n\r\n  let lineHeightVal = value;\r\n\r\n  if (isPx && value) {\r\n    lineHeightVal = value / 16;\r\n  } else if (isPr) {\r\n    lineHeightVal = value / 100;\r\n  }\r\n  // when line-height is 1.0 these is no need to set spacing\r\n  const isNoSpacing = lineHeightVal == 1;\r\n\r\n  if (value && !isNoSpacing) {\r\n    const s = lineHeightVal * lineHeightToSpace;\r\n    spacing.line = s;\r\n    spacing.lineRule = LineRuleType.AUTO;\r\n  }\r\n  styleOption.spacing = spacing;\r\n\r\n  return styleOption;\r\n};\r\n","import { D_FontSizePX } from './../default';\r\nimport {\r\n  D_FontSizePT,\r\n  PXbyPT,\r\n  PXbyTWIPS,\r\n  Size,\r\n  Direction,\r\n  PaddingDirection,\r\n} from '../default';\r\nimport { handleSizeNumber } from '../utils';\r\nimport { IndentType } from '../types';\r\nimport { deepCopyByJSON } from './../utils';\r\nimport { TokenHandler } from './types';\r\n\r\nexport const paddingHandler: TokenHandler = ({ key, val }, styleOp) => {\r\n  const styleOption = deepCopyByJSON(styleOp);\r\n  type Dire = keyof typeof Direction;\r\n  const dire =\r\n    PaddingDirection[key as keyof typeof PaddingDirection] || Direction.left;\r\n  const { value, type } = handleSizeNumber(val);\r\n\r\n  // handle indent\r\n  const indent: IndentType = {};\r\n\r\n  const size = styleOption.size || D_FontSizePX;\r\n\r\n  const oneCharSizePT = (size / PXbyPT / 2) * PXbyTWIPS;\r\n\r\n  const isEM = type.match(Size.em);\r\n  const isPX = type.match(Size.px);\r\n  const isPT = type.match(Size.pt);\r\n\r\n  let indentValue = 0;\r\n\r\n  if (isEM) {\r\n    indentValue = value * oneCharSizePT;\r\n  } else if (isPX) {\r\n    indentValue = (value / 20) * oneCharSizePT;\r\n  } else if (isPT) {\r\n    indentValue = (value / D_FontSizePT) * oneCharSizePT;\r\n  }\r\n\r\n  indent[dire as Dire] = indentValue;\r\n  styleOption.indent = indent;\r\n\r\n  return styleOption;\r\n};\r\n","import { deepCopyByJSON } from './../utils';\r\nimport { TokenHandler } from './types';\r\nimport { StyleMap } from './styleMap';\r\nimport { SingleLine } from '../default';\r\n\r\nexport const textDecorationHandler: TokenHandler = ({ val }, styleOp) => {\r\n  const styleOption = deepCopyByJSON(styleOp);\r\n  if (val === StyleMap.lineThrough) {\r\n    styleOption.strike = true;\r\n  } else if (val === StyleMap.underline) {\r\n    styleOption.underline = SingleLine;\r\n  }\r\n  return styleOption;\r\n};\r\n","import { D_FontSizePX } from './../default';\r\nimport { D_FontSizePT, PXbyPT, PXbyTWIPS, Size } from '../default';\r\nimport { handleSizeNumber } from '../utils';\r\nimport { IndentType } from '../types';\r\nimport { deepCopyByJSON } from './../utils';\r\nimport { TokenHandler } from './types';\r\n\r\nexport const textIndentHandler: TokenHandler = ({ val }, styleOp) => {\r\n  const styleOption = deepCopyByJSON(styleOp);\r\n  const { value, type } = handleSizeNumber(val);\r\n\r\n  const indent: IndentType = {};\r\n\r\n  const size = styleOption.size || D_FontSizePX;\r\n\r\n  const oneCharSizePT = (size / PXbyPT / 2) * PXbyTWIPS;\r\n\r\n  const isEM = type.match(Size.em);\r\n  const isPX = type.match(Size.px);\r\n  const isPT = type.match(Size.pt);\r\n\r\n  let indentValue = 0;\r\n  if (isEM) {\r\n    indentValue = value * oneCharSizePT;\r\n  } else if (isPX) {\r\n    indentValue = (value / 20) * oneCharSizePT;\r\n  } else if (isPT) {\r\n    indentValue = (value / D_FontSizePT) * oneCharSizePT;\r\n  }\r\n  // for now only support firstLine for the reason that it is the only one in web\r\n  indent.firstLine = indentValue;\r\n  styleOption.indent = indent;\r\n\r\n  return styleOption;\r\n};\r\n","import { verticalAlignMap } from '../default';\r\nimport { deepCopyByJSON } from './../utils';\r\nimport { TokenHandler } from './types';\r\n\r\nexport const verticalAlignHandler: TokenHandler = ({ val }, styleOp) => {\r\n  const styleOption = deepCopyByJSON(styleOp);\r\n\r\n  styleOption.verticalAlign =\r\n    verticalAlignMap[val as keyof typeof verticalAlignMap];\r\n\r\n  return styleOption;\r\n};\r\n","import { deepCopyByJSON } from './../utils';\r\nimport { TokenHandler } from './types';\r\n\r\nexport const widthHandler: TokenHandler = ({ val }, styleOp) => {\r\n  const styleOption = deepCopyByJSON(styleOp);\r\n\r\n  const w = parseFloat(val.replace(/%/i, ''));\r\n  styleOption.tWidth = w;\r\n\r\n  return styleOption;\r\n};\r\n","import { deepCopyByJSON } from './../utils';\r\nimport { TokenHandler } from './types';\r\n\r\nexport const subScriptHandler: TokenHandler = (_, styleOp) => {\r\n  const styleOption = deepCopyByJSON(styleOp);\r\n\r\n  styleOption.subScript = true;\r\n\r\n  return styleOption;\r\n};\r\n","import { deepCopyByJSON } from './../utils';\r\nimport { TokenHandler } from './types';\r\n\r\nexport const superScriptHandler: TokenHandler = (_, styleOp) => {\r\n  const styleOption = deepCopyByJSON(styleOp);\r\n\r\n  styleOption.superScript = true;\r\n\r\n  return styleOption;\r\n};\r\n","import { Node } from './types';\r\n\r\n// text node\r\nexport const isTextNode = (node: Node) => node && node.type === 'text';\r\n\r\n// text node with content\r\nexport const isFillTextNode = (node: Node) =>\r\n  node && node.type === 'text' && node.content;\r\n","import { TagType } from './../default';\r\nimport { CustomTagStyleMap, Node, StyleInterface, StyleOption } from '../types';\r\nimport {\r\n  D_FontSizePT,\r\n  D_TagStyleMap,\r\n  PXbyPT,\r\n  Splitter_Colon,\r\n  Splitter_Semicolon,\r\n} from '../default';\r\nimport {\r\n  ExternalHyperlink,\r\n  ImageRun,\r\n  IRunOptions,\r\n  ParagraphChild,\r\n  TextRun,\r\n} from 'docx';\r\nimport {\r\n  getImageBlob,\r\n  getUniqueArrayByKey,\r\n  isFilledArray,\r\n  isValidColor,\r\n  optimizeBlankSpace,\r\n  toHex,\r\n  typeOf,\r\n} from '../utils';\r\n\r\nimport { StyleMap } from '../token/styleMap';\r\nimport { handleSizeNumber } from '../utils';\r\nimport { provideStyle } from '../token';\r\nimport { isFillTextNode } from '../isNodeType';\r\n\r\n// convert styles to flat array\r\nexport const toFlatStyleList = (\r\n  styleStringList: string[]\r\n): StyleInterface[] => {\r\n  const inlined = styleStringList\r\n    .filter(Boolean)\r\n    .map((str) => str.split(`${Splitter_Semicolon}`))\r\n    .flat()\r\n    .filter((str) => str.indexOf(`${Splitter_Colon}`) > -1)\r\n    .map((attr) => {\r\n      const [key, val] = attr.trim().split(Splitter_Colon);\r\n      const v = typeOf(val) === 'string' ? val.trim().replace(/;/i, '') : val;\r\n      const value = isValidColor(v) ? toHex(v) : v;\r\n      return {\r\n        key: key.trim(),\r\n        val: value,\r\n      };\r\n    });\r\n\r\n  return getUniqueArrayByKey(inlined, 'key');\r\n};\r\n\r\n// text creator\r\nexport const calcTextRunStyle = (\r\n  styleList: string[],\r\n  tagStyleMap: CustomTagStyleMap = D_TagStyleMap\r\n) => {\r\n  const styleOption: Partial<StyleOption> = {};\r\n  if (!styleList || styleList.length === 0) return styleOption;\r\n  const tagList = Object.keys(tagStyleMap);\r\n\r\n  // handle tag style like: em del strong...\r\n  const tagStyleList: string[] = styleList.filter((str) =>\r\n    tagList.includes(str)\r\n  );\r\n\r\n  const inlined = tagStyleList\r\n    .map((str) => tagStyleMap[str as keyof typeof tagStyleMap])\r\n    .filter(Boolean) as string[];\r\n\r\n  // flat inline styles\r\n  const styles = toFlatStyleList([...styleList, ...inlined]);\r\n\r\n  const fontSizeSty = styles.find(\r\n    (sty: StyleInterface) => sty.key === StyleMap.fontSize\r\n  );\r\n\r\n  const fontSize =\r\n    fontSizeSty && fontSizeSty.val ? handleSizeNumber(fontSizeSty.val) : null;\r\n\r\n  /**\r\n   * size(halfPts): Set the font size, measured in half-points\r\n   */\r\n  if (fontSize) {\r\n    const { value, type } = fontSize;\r\n    const size = type === 'pt' ? value * 2 : value * PXbyPT * 2;\r\n    styleOption.size = size;\r\n  } else {\r\n    styleOption.size = D_FontSizePT * 2;\r\n  }\r\n\r\n  const inlinedStyleOption = provideStyle(styles);\r\n\r\n  return { ...styleOption, ...inlinedStyleOption };\r\n};\r\n\r\nexport const textCreator = (\r\n  node: Node,\r\n  tagStyleMap: CustomTagStyleMap = D_TagStyleMap\r\n) => {\r\n  const { shape, content } = node;\r\n\r\n  const textBuildParam = { text: optimizeBlankSpace(content) };\r\n\r\n  const styleOption =\r\n    shape && shape.length ? calcTextRunStyle(shape, tagStyleMap) : {};\r\n\r\n  return new TextRun({ ...textBuildParam, ...styleOption } as IRunOptions);\r\n};\r\n\r\n// map children as ParagraphChild\r\nexport const getChildrenByTextRun = async (\r\n  nodeList: Node[],\r\n  tagStyleMap: CustomTagStyleMap = D_TagStyleMap\r\n): Promise<ParagraphChild[]> => {\r\n  const texts: ParagraphChild[] = [];\r\n  const concatText = async (list: Node[], arr: ParagraphChild[]) => {\r\n    for (let node of list) {\r\n      if (isFillTextNode(node)) {\r\n        arr.push(textCreator(node, tagStyleMap));\r\n      } else if (node.name === TagType.img) {\r\n        const { attrs, shape } = node;\r\n        const { src, width = 100, height = 100 } = attrs;\r\n        const styleOp = calcTextRunStyle(shape);\r\n        if (src) {\r\n          try {\r\n            const imgBlob = await getImageBlob(String(src));\r\n            const image = new ImageRun({\r\n              data: imgBlob as unknown as ArrayBuffer,\r\n              transformation: {\r\n                width: styleOp.tWidth || Number(width),\r\n                height: styleOp.tHeight || Number(height),\r\n              },\r\n            });\r\n            arr.push(image);\r\n          } catch (e) {\r\n            console.log('download image error', e);\r\n          }\r\n        }\r\n      } else if (isFilledArray(node.children)) {\r\n        // deal with hyperlink\r\n        if (node.name === TagType.link) {\r\n          const { attrs } = node;\r\n          const text = new ExternalHyperlink({\r\n            children: await getChildrenByTextRun(node.children, tagStyleMap),\r\n            link: attrs.href ? String(attrs.href) : '',\r\n          });\r\n          arr.push(text);\r\n        } else {\r\n          await concatText(node.children, arr);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  await concatText(nodeList, texts);\r\n\r\n  return texts;\r\n};\r\n","import {\r\n  BorderStyle,\r\n  HeightRule,\r\n  ITableCellOptions,\r\n  ITableOptions,\r\n  Paragraph,\r\n  Table,\r\n  TableCell,\r\n  TableLayoutType,\r\n  TableRow,\r\n  WidthType,\r\n} from 'docx';\r\nimport { CellParam, CustomTagStyleMap, Node, TableParam } from '../types';\r\nimport {\r\n  D_CELL_MARGIN,\r\n  D_TableBorderColor,\r\n  D_TableBorderSize,\r\n  D_TableFullWidth,\r\n  DefaultBorder,\r\n} from '../default';\r\nimport { D_TableCellHeightPx, D_TagStyleMap } from './../default';\r\nimport { calcTextRunStyle, getChildrenByTextRun } from './text';\r\n\r\nimport { handleSizeNumber } from '../utils';\r\n\r\nexport const calcTableWidth = (colsArr: number[]) => {\r\n  return colsArr.reduce((prev, cur) => prev + cur, 0);\r\n};\r\n\r\nexport const getTableBorderStyleSingle = (size: number, color: string) => {\r\n  return { style: BorderStyle.SINGLE, size: size * 10, color: color };\r\n};\r\n\r\nconst tablePxByXDA = D_TableFullWidth / 553;\r\n\r\nexport const getColGroupWidth = (cols: Node[]) => {\r\n  const count = cols.length;\r\n  const defaultWidth = count ? D_TableFullWidth / tablePxByXDA / count : 0;\r\n  return cols\r\n    .filter((c) => c.name === 'col')\r\n    .map((col) => {\r\n      const { attrs } = col;\r\n      return (\r\n        tablePxByXDA *\r\n        (handleSizeNumber(String(attrs.width))?.value || defaultWidth)\r\n      );\r\n    });\r\n};\r\n\r\nexport const handleCellWidthFromColgroup = (\r\n  cols: number[],\r\n  index: number,\r\n  colspan: number\r\n) => {\r\n  return cols\r\n    .slice(index, index + colspan)\r\n    .reduce((prev, cur) => prev + cur, 0);\r\n};\r\n\r\nexport const getCellWidthInDXA = (size: number) => {\r\n  return size * tablePxByXDA;\r\n};\r\n\r\n// table node to docx ITableOptions\r\nexport const tableNodeToITableOptions = async (\r\n  tableNode: Node,\r\n  tagStyleMap: CustomTagStyleMap = D_TagStyleMap\r\n): Promise<ITableOptions | null> => {\r\n  const { children: tc, attrs, shape } = tableNode;\r\n\r\n  const isTBody = (n: Node) => n.name === 'tbody';\r\n  const tbody = tc.find(isTBody);\r\n  if (!tbody) return null;\r\n\r\n  // deal colgroup for cell width\r\n  const colGroup = tc.find((n) => n.name === 'colgroup');\r\n  const cols = colGroup ? getColGroupWidth(colGroup.children) : [];\r\n  // const colsTotalWidth = cols.reduce((prev, cur) => prev + cur, 0);\r\n\r\n  // Google DOCS does not support start and end borders, instead they use left and right borders.\r\n  // So to set left and right borders for Google DOCS you should use\r\n  // see https://docx.js.org/#/usage/tables\r\n  const tableParam: TableParam = {\r\n    layout: TableLayoutType.FIXED,\r\n    borders: {\r\n      top: DefaultBorder,\r\n      left: DefaultBorder,\r\n      right: DefaultBorder,\r\n      bottom: DefaultBorder,\r\n    },\r\n    rows: [],\r\n  };\r\n\r\n  const styleOp = calcTextRunStyle(shape, tagStyleMap);\r\n\r\n  const { border } = attrs;\r\n  const borderSize = border ? parseFloat(border as string) : D_TableBorderSize;\r\n  const borderColor = styleOp.borderColor || D_TableBorderColor;\r\n\r\n  const borders = {\r\n    top: getTableBorderStyleSingle(borderSize, borderColor),\r\n    right: getTableBorderStyleSingle(borderSize, borderColor),\r\n    bottom: getTableBorderStyleSingle(borderSize, borderColor),\r\n    left: getTableBorderStyleSingle(borderSize, borderColor),\r\n  };\r\n\r\n  tableParam.borders = borders;\r\n\r\n  const isTr = (n: Node) => n.name === 'tr';\r\n  const isTd = (n: Node) => n.name === 'td';\r\n\r\n  const firstRowColumnSize: number[] = [];\r\n  let hasColGroup = false;\r\n  const trs = tbody.children.filter(isTr);\r\n\r\n  const rows = [];\r\n\r\n  for (let { tr, idx } of trs.map((tr, idx) => ({ tr, idx }))) {\r\n    const { children, attrs } = tr;\r\n\r\n    let trHeight = attrs?.style\r\n      ? calcTextRunStyle([attrs?.style as string], tagStyleMap)?.tHeight ||\r\n        D_TableCellHeightPx\r\n      : D_TableCellHeightPx;\r\n\r\n    const tds = children.filter(isTd);\r\n\r\n    const cellChildren = [];\r\n\r\n    for (let tdObj of tds.map((item, index) => ({ item, index }))) {\r\n      const { item: td, index } = tdObj;\r\n      const { attrs, shape } = td;\r\n\r\n      // table paragraph use line-height 1.0 for default\r\n      const styles = { ...tagStyleMap };\r\n      delete styles.p;\r\n\r\n      const tdStyleOption = calcTextRunStyle(shape, styles);\r\n\r\n      // TODO: support Nested Tables and other elements\r\n      // use `contentBuilder` maybe better\r\n\r\n      const texts = [];\r\n      for (let t of td.children) {\r\n        const { shape, content, children } = t;\r\n        if (children?.length) {\r\n          const c = await getChildrenByTextRun(children || [], styles);\r\n          texts.push(\r\n            new Paragraph({\r\n              children: c,\r\n              ...calcTextRunStyle(shape, styles),\r\n            })\r\n          );\r\n        }\r\n        texts.push(\r\n          new Paragraph({\r\n            text: content,\r\n            ...calcTextRunStyle(shape, styles),\r\n          })\r\n        );\r\n      }\r\n\r\n      const cellParam: CellParam = {\r\n        children: texts,\r\n      };\r\n\r\n      const { colspan, rowspan } = attrs;\r\n      if (colspan && Number(colspan) !== 0) {\r\n        cellParam.columnSpan = Number(colspan);\r\n      }\r\n\r\n      if (rowspan && Number(rowspan) !== 0) {\r\n        cellParam.rowSpan = Number(rowspan);\r\n      }\r\n\r\n      hasColGroup = !!cols.length && cols.every((c) => c !== 0);\r\n\r\n      if (hasColGroup) {\r\n        const width = handleCellWidthFromColgroup(\r\n          cols,\r\n          index,\r\n          cellParam.columnSpan || 1\r\n        );\r\n        tdStyleOption.tWidth = width;\r\n      }\r\n\r\n      const cellWidth = hasColGroup\r\n        ? tdStyleOption.tWidth || D_TableFullWidth / cols.length\r\n        : getCellWidthInDXA(tdStyleOption.tWidth || 185);\r\n\r\n      cellParam.width = {\r\n        size: cellWidth,\r\n        type: WidthType.DXA,\r\n      };\r\n\r\n      if (idx === 0) {\r\n        if (cellParam.columnSpan) {\r\n          for (let i = 0; i < cellParam.columnSpan; i++) {\r\n            firstRowColumnSize.push(cellWidth / cellParam.columnSpan);\r\n          }\r\n        } else {\r\n          firstRowColumnSize.push(cellWidth);\r\n        }\r\n      }\r\n\r\n      const margins = {\r\n        marginUnitType: WidthType.DXA,\r\n        top: D_CELL_MARGIN,\r\n        bottom: D_CELL_MARGIN,\r\n        left: D_CELL_MARGIN,\r\n        right: D_CELL_MARGIN,\r\n      };\r\n\r\n      const tableCellOptions = {\r\n        ...cellParam,\r\n        ...calcTextRunStyle(shape, styles),\r\n        margins,\r\n      };\r\n\r\n      cellChildren.push(new TableCell(tableCellOptions as ITableCellOptions));\r\n    }\r\n\r\n    const para = {\r\n      children: cellChildren,\r\n      height: { value: 0, rule: HeightRule.EXACT },\r\n    };\r\n\r\n    const h = (trHeight ?? D_TableCellHeightPx) * tablePxByXDA;\r\n\r\n    para.height = { value: h, rule: HeightRule.EXACT };\r\n\r\n    rows.push(new TableRow(para));\r\n  }\r\n\r\n  const tableWidths = hasColGroup ? cols : firstRowColumnSize;\r\n  tableParam.columnWidths = tableWidths;\r\n\r\n  tableParam.width = {\r\n    size: calcTableWidth(tableWidths),\r\n    type: WidthType.DXA,\r\n  };\r\n  tableParam.rows = rows;\r\n  return tableParam;\r\n};\r\n\r\n// create docx table from table node\r\nexport const tableCreator = async (\r\n  tableNode: Node,\r\n  tagStyleMap: CustomTagStyleMap = D_TagStyleMap\r\n) => {\r\n  const tableParam = await tableNodeToITableOptions(tableNode, tagStyleMap);\r\n  if (!tableParam) return null;\r\n  return new Table(tableParam);\r\n};\r\n","import { Paragraph, ParagraphChild } from 'docx';\r\nimport { D_TagStyleMap, TagType } from '../default';\r\nimport { CustomTagStyleMap, Node } from '../types';\r\nimport { isFilledArray } from '../utils';\r\nimport { tableCreator } from './table';\r\nimport { calcTextRunStyle, getChildrenByTextRun } from './text';\r\n\r\nexport const contentBuilder = async (\r\n  node: Node,\r\n  tagStyleMap: CustomTagStyleMap = D_TagStyleMap\r\n) => {\r\n  const { type, name, children, content, shape } = node;\r\n\r\n  const para: { text: string; children: ParagraphChild[] } = {\r\n    text: content,\r\n    children: [],\r\n  };\r\n\r\n  const isText = type === TagType.text && content;\r\n  const isLink = name === TagType.link;\r\n  const isTable = name === TagType.table;\r\n  const isList = name === TagType.ordered_list || name === TagType.unordered_list;\r\n\r\n  const isNormalParagraphWithChildren =\r\n    !isLink &&\r\n    !isTable &&\r\n    !isList &&\r\n    children &&\r\n    isFilledArray(children) &&\r\n    children.length > 0;\r\n\r\n  if (isText) {\r\n    const paragraphOption = {\r\n      ...para,\r\n      ...calcTextRunStyle(shape, tagStyleMap),\r\n    };\r\n    return new Paragraph(paragraphOption);\r\n  } else if (isNormalParagraphWithChildren) {\r\n    para.children = await getChildrenByTextRun(children, tagStyleMap);\r\n    const paragraphOption = {\r\n      ...para,\r\n      ...calcTextRunStyle(shape, tagStyleMap),\r\n    };\r\n    return new Paragraph(paragraphOption);\r\n  } else if (isTable) {\r\n    const table = await tableCreator(node, tagStyleMap);\r\n    return table;\r\n  } else if(isList) {\r\n    return null;\r\n  }\r\n  else {\r\n    return null;\r\n  }\r\n};\r\n","import {\r\n  CustomTagStyleMap,\r\n  HTMLString,\r\n  IExportDoc,\r\n  IExportOption,\r\n  Node,\r\n} from './types';\r\nimport { D_Layout, D_TagStyleMap } from './default';\r\nimport { Document, Footer, Header, Packer, Paragraph } from 'docx';\r\n\r\nimport { isFilledArray, trimHtml, calcMargin } from './utils';\r\nimport { tableNodeToITableOptions } from './builder/table';\r\n\r\nimport JSZip from 'jszip';\r\nimport { parse } from 'html-to-ast';\r\nimport { saveAs } from 'file-saver';\r\nimport { contentBuilder } from './builder';\r\n\r\nexport const getInnerTextNode = (node: Node) => {\r\n  let inner = node;\r\n  while (inner && inner.children && inner.children.length === 1) {\r\n    inner = inner.children[0];\r\n  }\r\n  return inner;\r\n};\r\n\r\n// recursion chain style\r\nexport const chainStyle = (\r\n  nodeList: Node[],\r\n  style: string[] = [],\r\n  tagStyleMap: CustomTagStyleMap = D_TagStyleMap\r\n) => {\r\n  if (!nodeList || !isFilledArray(nodeList)) return;\r\n\r\n  nodeList.forEach((node) => {\r\n    const { attrs, children, name } = node;\r\n    let STYLE: string[] =\r\n      typeof attrs?.style === 'string' ? [attrs.style, ...style] : style;\r\n\r\n    const shape = name ? [name, ...STYLE] : [...STYLE];\r\n    node.shape = shape;\r\n\r\n    if (isFilledArray(children)) {\r\n      chainStyle(children, shape, tagStyleMap);\r\n    }\r\n  });\r\n};\r\n\r\n// style builder\r\nexport const StyleBuilder = (\r\n  list: Node[],\r\n  tagStyleMap: CustomTagStyleMap = D_TagStyleMap\r\n) => {\r\n  const nList = [...list];\r\n  chainStyle(nList, [], tagStyleMap);\r\n  return nList;\r\n};\r\n\r\n// element creator\r\nexport const ElementCreator = async (\r\n  astList: Node[],\r\n  tagStyleMap: CustomTagStyleMap = D_TagStyleMap\r\n): Promise<Paragraph[]> => {\r\n  if (!astList || astList.length === 0) return [];\r\n  const tags = StyleBuilder(\r\n    astList.filter((n: Node) => n.type === 'tag'),\r\n    tagStyleMap\r\n  );\r\n  if (!tags) return [];\r\n\r\n  const ps: Paragraph[] = [];\r\n  for (let node of tags) {\r\n    const p = await contentBuilder(node, tagStyleMap);\r\n    if (p) {\r\n      ps.push(p as Paragraph);\r\n    }\r\n  }\r\n  // const ps = tags\r\n  //   .map((node: Node) => {\r\n  //     return contentBuilder(node, tagStyleMap);\r\n  //   })\r\n  //   .filter(Boolean);\r\n  return [...ps] as Paragraph[];\r\n};\r\n\r\n// parse html string into Node list\r\nexport const htmlToAST = (html: string): Node[] => {\r\n  return parse(html) as Node[];\r\n};\r\n\r\n// generate Document\r\nexport const genDocument = async (\r\n  html: HTMLString,\r\n  options?: IExportOption\r\n) => {\r\n  const layoutOp = options?.layout || {};\r\n  const layout = { ...D_Layout, ...layoutOp };\r\n\r\n  const styleMap = options?.tagStyleMap || D_TagStyleMap;\r\n\r\n  const ast: Node[] = htmlToAST(html);\r\n\r\n  const paragraphs = await ElementCreator(ast, styleMap);\r\n  const {\r\n    orientation,\r\n    topMargin,\r\n    leftMargin,\r\n    rightMargin,\r\n    bottomMargin,\r\n    header,\r\n    footer,\r\n  } = layout;\r\n\r\n  const margin = {\r\n    top: calcMargin(topMargin),\r\n    left: calcMargin(leftMargin),\r\n    right: calcMargin(rightMargin),\r\n    bottom: calcMargin(bottomMargin),\r\n  };\r\n\r\n  const page = {\r\n    margin,\r\n    size: {\r\n      orientation,\r\n    },\r\n  };\r\n\r\n  const section = {\r\n    properties: {\r\n      page,\r\n    },\r\n    children: paragraphs,\r\n    headers: {},\r\n    footers: {},\r\n  };\r\n\r\n  if (header) {\r\n    const ast = parse(header) as Node[];\r\n\r\n    section.headers = {\r\n      default: new Header({\r\n        children: await ElementCreator(ast, styleMap),\r\n      }),\r\n    };\r\n  }\r\n\r\n  if (footer) {\r\n    const ast = parse(footer) as Node[];\r\n    section.footers = {\r\n      default: new Footer({\r\n        children: await ElementCreator(ast, styleMap),\r\n      }),\r\n    };\r\n  }\r\n\r\n  const doc = new Document({\r\n    styles: {\r\n      paragraphStyles: [],\r\n    },\r\n    sections: [section],\r\n  });\r\n  return doc;\r\n};\r\n\r\n// export html as docx file\r\nexport const exportAsDocx = async (doc: Document, docName = '') => {\r\n  Packer.toBlob(doc).then((blob) => {\r\n    saveAs(blob, `${docName}.docx`);\r\n  });\r\n};\r\n\r\n// html -> docx\r\nexport const exportHtmlToDocx = async (\r\n  html: HTMLString,\r\n  docName = 'doc',\r\n  options?: IExportOption\r\n) => {\r\n  const doc = await genDocument(trimHtml(html), options);\r\n  exportAsDocx(doc, docName);\r\n  return doc;\r\n};\r\n\r\n// export multi files as .zip\r\nexport const exportMultiDocsAsZip = async (\r\n  docList: IExportDoc[],\r\n  fileName = 'docs',\r\n  export_option?: IExportOption\r\n) => {\r\n  const zip = new JSZip();\r\n  const len = docList.length;\r\n  if (len === 1) {\r\n    const d = docList[0];\r\n    const { html, name, option } = d;\r\n    const file = await genDocument(trimHtml(html), option || export_option);\r\n    exportAsDocx(file, name);\r\n    return;\r\n  }\r\n  for (let docFile of docList) {\r\n    const { html, name, option } = docFile;\r\n    const doc = await genDocument(trimHtml(html), option || export_option);\r\n    const file = await Packer.toBlob(doc);\r\n    zip.file(`${name}.docx`, file);\r\n  }\r\n\r\n  zip.generateAsync({ type: 'blob' }).then((content) => {\r\n    saveAs(content, `${fileName}.zip`);\r\n  });\r\n};\r\n\r\nexport const exportAsZip = exportMultiDocsAsZip;\r\n\r\nexport { IExportDoc, IExportOption };\r\n\r\nexport { parse, tableNodeToITableOptions, D_Layout, D_TagStyleMap };\r\n"],"names":["AlignMap","left","AlignmentType","LEFT","center","CENTER","right","RIGHT","D_TagStyleMap","p","strong","em","u","del","h1","h2","h3","h4","h5","h6","sub","sup","a","D_Layout","bottomMargin","leftMargin","rightMargin","topMargin","orientation","PageOrientation","PORTRAIT","PaddingDirection","padding-left","padding-right","padding-top","padding-bottom","SingleLine","type","color","DefaultBorder","style","BorderStyle","SINGLE","size","verticalAlignMap","top","VerticalAlign","TOP","middle","bottom","BOTTOM","typeOf","obj","[object Boolean]","[object Number]","[object String]","[object Function]","[object Array]","[object Date]","[object RegExp]","[object Undefined]","[object Null]","[object Object]","Object","prototype","toString","call","isFilledArray","arr","Array","isArray","length","trimHtml","str","replace","removeTagDIV","arrEntities","lt","gt","nbsp","amp","quot","_","t","escape2Html","deepCopyByJSON","JSON","parse","stringify","handleSizeNumber","val","m","match","target","RegExp","value","parseFloat","calcMargin","margin","convertMillimetersToTwip","toUpperCase","optimizeBlankSpace","content","ratio","textWithoutBlank","trimEnd","blank","slice","optimizedBlank","fill","join","getImageBlob","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","src","wrap","_context","prev","next","fetch","then","res","blob","abrupt","sent","stop","_x","apply","arguments","tokens","name","judge","key","handler","styleOp","styleOption","_ref2","shading","ShadingType","CLEAR","_ref14","toLowerCase","bold","_ref5","indexOf","alignment","_ref9","borderColor","_ref7","font","_ref15","italics","_ref11","h","tHeight","_ref6","spacing","_handleSizeNumber","isPx","isPr","lineHeightVal","line","lineRule","LineRuleType","AUTO","_ref4","dire","indent","oneCharSizePT","isEM","isPX","isPT","indentValue","_ref3","strike","underline","_ref12","firstLine","_ref8","verticalAlign","_ref10","w","tWidth","_ref17","subScript","_ref18","superScript","isFillTextNode","node","calcTextRunStyle","styleList","tagStyleMap","tagList","keys","inlined","filter","includes","map","Boolean","styles","uniqueKey","isEveryObject","every","item","hash","reduce","k","push","getUniqueArrayByKey","concat","split","flat","attr","_attr$trim$split","trim","v","tinycolor","isValid","toHexString","fontSizeSty","find","sty","fontSize","inlinedStyleOption","forEach","token","provideStyle","_extends","textCreator","shape","textBuildParam","text","TextRun","getChildrenByTextRun","_callee2","nodeList","texts","concatText","list","_iterator","_step","attrs","_attrs$width","width","_attrs$height","height","image","_attrs","_createForOfIteratorHelperLoose","done","String","ImageRun","data","transformation","Number","t0","console","log","children","t1","ExternalHyperlink","t2","t3","href","t4","link","_x3","_x4","_context2","_x2","getTableBorderStyleSingle","getColGroupWidth","cols","count","defaultWidth","D_TableFullWidth","c","col","handleCellWidthFromColgroup","index","colspan","cur","tableNodeToITableOptions","tableNode","tbody","tc","n","colGroup","tableParam","layout","TableLayoutType","FIXED","borders","rows","borderSize","border","isTd","firstRowColumnSize","hasColGroup","trs","tr","idx","_step$value","trHeight","_calcTextRunStyle","tds","cellChildren","_iterator2","_step2","tdObj","td","tdStyleOption","_iterator3","_step3","Paragraph","cellParam","rowspan","columnSpan","rowSpan","cellWidth","WidthType","DXA","i","margins","marginUnitType","tableCellOptions","TableCell","para","rule","HeightRule","EXACT","TableRow","columnWidths","tableWidths","colsArr","tableCreator","Table","contentBuilder","isText","isTable","isList","isNormalParagraphWithChildren","paragraphOption","chainStyle","STYLE","StyleBuilder","nList","ElementCreator","astList","tags","ps","htmlToAST","html","genDocument","options","styleMap","ast","paragraphs","header","footer","section","_ast","_ast2","doc","properties","page","headers","footers","Header","default","Footer","t5","t6","t7","Document","paragraphStyles","sections","exportAsDocx","_callee3","docName","_context3","Packer","toBlob","saveAs","_x5","_x6","exportHtmlToDocx","_callee4","_context4","_x7","_x8","_x9","exportMultiDocsAsZip","_callee5","docList","fileName","export_option","zip","d","option","docFile","_html","_name","_option","_context5","JSZip","file","generateAsync","_x10","_x11","_x12","exportAsZip","inner"],"mappings":"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"}